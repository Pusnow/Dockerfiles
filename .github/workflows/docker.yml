name: Build Docker Images

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 0 * * 0"
env:
  ARCHS: "amd64"
  CR_PATH: ghcr.io/pusnow
  DH_PATH: docker.io/pusnow
  DEBIAN_TAG: bullseye


jobs:
  base:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debian-tag: ["bullseye", "bookworm"]
    steps:
      - name: Install packages
        run: |
          sudo apt update && sudo apt install -y crun qemu-user-static

      - uses: actions/checkout@v2

      - name: Declare manifest
        run: |
          buildah manifest create debian-base-manifest

      - name: Build base images
        run: |
          for ARCH in $ARCHS; do
            buildah bud --build-arg DEBIAN_TAG=${{ matrix.debian-tag }} --tag debian-base:${{ matrix.debian-tag }} --manifest debian-base-manifest --arch "$ARCH" debian-base
          done

      - name: Log into GitHub Container Registry
        run: buildah login -u ${{ secrets.CR_NAME }} -p "${{ secrets.CR_TOKEN }}" ghcr.io

      - name: Push image to GitHub Container Registry
        run: |
          buildah tag debian-base:${{ matrix.debian-tag }} ${{ env.CR_PATH }}/debian-base:${{ matrix.debian-tag }}
          buildah manifest push --all debian-base-manifest "docker://${{ env.CR_PATH }}/debian-base:${{ matrix.debian-tag }}"
      # - uses: azure/container-scan@v0
      #   with:
      #     image-name: ${{ env.CR_PATH }}/debian-base:${{ matrix.debian-tag }}
  debian:
    needs: base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: borg
            packages: borgbackup
            cmd: borg
          - name: dnsmasq
            packages: dnsmasq iptables
            cmd: /usr/sbin/dnsmasq
          - name: hostapd
            packages: hostapd iw wireless-tools
            cmd: /usr/sbin/hostapd
          - name: vsftpd
            packages: vsftpd
            cmd: /usr/sbin/vsftpd
    steps:
      - name: Install packages
        run: |
          sudo apt update && sudo apt install -y crun qemu-user-static
      - uses: actions/checkout@v2
      - name: Declare manifest
        run: |
          buildah manifest create ${{ matrix.image.name }}-manifest

      - name: Build images
        run: |
          for ARCH in $ARCHS; do
            buildah bud --build-arg PS_DEBIAN_TAG=${{ env.DEBIAN_TAG }} --build-arg DEBIAN_PKGS="${{ matrix.image.packages }}" --build-arg DEBIAN_CMD="${{ matrix.image.cmd }}" --tag ${{ matrix.image.name }}:latest --manifest ${{ matrix.image.name }}-manifest --arch "$ARCH" debian-img
          done

      - name: Log into GitHub Container Registry
        run: buildah login -u ${{ secrets.CR_NAME }} -p "${{ secrets.CR_TOKEN }}" ghcr.io

      - name: Push image to GitHub Container Registry
        run: |
          buildah tag ${{ matrix.image.name }}:latest ${{ env.CR_PATH }}/${{ matrix.image.name }}:latest
          buildah manifest push --all ${{ matrix.image.name }}-manifest "docker://${{ env.CR_PATH }}/${{ matrix.image.name }}:latest"
      # - uses: azure/container-scan@v0
      #   with:
      #     image-name: ${{ env.CR_PATH }}/${{ matrix.image.name }}:latest

  custom:
    needs: base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: texlive
          - name: qemu
          - name: qemu
            debian: bookworm
          - name: ssh
          - name: wsman
    steps:
      - name: Install packages
        run: |
          sudo apt update && sudo apt install -y crun qemu-user-static
      - uses: actions/checkout@v2
      - name: Declare manifest
        run: |
          buildah manifest create ${{ matrix.image.name }}-manifest

      - name: Build images
        if: ${{ matrix.image.debian == '' }}
        run: |
          for ARCH in $ARCHS; do
            buildah bud --build-arg PS_DEBIAN_TAG=${{ env.DEBIAN_TAG }} --tag ${{ matrix.image.name }}:latest --manifest ${{ matrix.image.name }}-manifest --arch "$ARCH" ${{ matrix.image.name }}
          done

      - name: Build images (custom debian)
        if: ${{ matrix.image.debian != '' }}
        run: |
          for ARCH in $ARCHS; do
            buildah bud --build-arg PS_DEBIAN_TAG=${{ matrix.image.debian }} --tag ${{ matrix.image.name }}:${{ matrix.image.debian }} --manifest ${{ matrix.image.name }}-manifest --arch "$ARCH" ${{ matrix.image.name }}
          done

      - name: Log into GitHub Container Registry
        run: buildah login -u ${{ secrets.CR_NAME }} -p "${{ secrets.CR_TOKEN }}" ghcr.io

      - name: Push image to GitHub Container Registry
        if: ${{ matrix.image.debian == '' }}
        run: |
          buildah tag ${{ matrix.image.name }}:latest ${{ env.CR_PATH }}/${{ matrix.image.name }}:latest
          buildah manifest push --all ${{ matrix.image.name }}-manifest "docker://${{ env.CR_PATH }}/${{ matrix.image.name }}:latest"

      - name: Push image to GitHub Container Registry (custom debian)
        if: ${{ matrix.image.debian != '' }}
        run: |
          buildah tag ${{ matrix.image.name }}:${{ matrix.image.debian }} ${{ env.CR_PATH }}/${{ matrix.image.name }}:${{ matrix.image.debian }}
          buildah manifest push --all ${{ matrix.image.name }}-manifest "docker://${{ env.CR_PATH }}/${{ matrix.image.name }}:${{ matrix.image.debian }}"

      # - uses: azure/container-scan@v0
      #   with:
      #     image-name: ${{ env.CR_PATH }}/${{ matrix.image.name }}:latest
  keepalive:
    needs: [custom, debian]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gautamkrishnar/keepalive-workflow@v1
    
